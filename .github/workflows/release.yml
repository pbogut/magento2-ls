name: Build & Release

on:
  push:
    branches: ["master"]

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64,
              OS: ubuntu-22.04,
              TARGET: x86_64-unknown-linux-gnu,
              CODE_TARGET: linux-x64,
            }
          - {
              NAME: windows-x64,
              OS: windows-2022,
              TARGET: x86_64-pc-windows-msvc,
              CODE_TARGET: win32-x64
            }
          - {
              NAME: windows-arm64,
              OS: windows-2022,
              TARGET: aarch64-pc-windows-msvc,
              CODE_TARGET: win32-arm64,
            }
          - {
              NAME: darwin-x64,
              OS: macos-12,
              TARGET: x86_64-apple-darwin,
              CODE_TARGET: darwin-x64,
            }
          - {
              NAME: darwin-arm64,
              OS: macos-12,
              TARGET: aarch64-apple-darwin,
              CODE_TARGET: darwin-arm64,
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust env
        uses: "./.github/actions/setup-rust-env"

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.build.TARGET }}

      - name: Rename magento2-ls binary
        shell: bash
        run: |
          binary_name="magento2-ls"

          extension=""
          # windows binaries have ".exe" extension
          if [[ "${{ matrix.build.OS }}" == *"windows"* ]]; then
            extension=".exe"
          fi

          mkdir -p dist
          cp "target/${{ matrix.build.TARGET }}/release/${binary_name}" "dist/${binary_name}-${{ matrix.build.NAME }}${extension}"

      - name: Check if release should be created
        shell: bash
        run: |
          if [[ $(git log -1 --pretty=%B) =~ ^release: ]]; then
            echo "SHOULD_RELEASE=yes" >> $GITHUB_ENV
          else
            echo "SHOULD_RELEASE=no" >> $GITHUB_ENV
          fi

      - name: Build vscode extension
        shell: bash
        run: |
          version=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)
          binary_name="magento2-ls"

          extension=""
          # windows binaries have ".exe" extension
          if [[ "${{ matrix.build.OS }}" == *"windows"* ]]; then
            extension=".exe"
          fi

          mkdir -p dist
          cp "target/${{ matrix.build.TARGET }}/release/${binary_name}" "vscode/server/${binary_name}${extension}"
          cp "README.md" "vscode/"
          cp "CHANGELOG.md" "vscode/"
          cd "vscode"
          npm install --include=dev
          if [[ "${{ env.SHOULD_RELEASE }}" == "yes" ]]; then
            npx vsce package --target ${{ matrix.build.CODE_TARGET }} -o ../dist/magento2-ls.${version}.${{ matrix.build.CODE_TARGET }}.vsix
          else
            npx vsce package --target ${{ matrix.build.CODE_TARGET }} -o ../dist/magento2-ls.${version}.${{ matrix.build.CODE_TARGET }}.vsix --pre-release
          fi

      - name: Upload dist
        uses: actions/upload-artifact@v3
        with:
          name: built-dist
          path: dist/*

  release:
    name: Release
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Download dist
        uses: actions/download-artifact@v3
        with:
          name: built-dist
          path: dist

      - name: Check if release should be created
        shell: bash
        run: |
          RELEASE_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)
          if [[ $(git log -1 --pretty=%B) =~ ^release: ]]; then
            echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
            git tag "$RELEASE_VERSION"
            git push -u origin "$RELEASE_VERSION"
            echo "SHOULD_RELEASE=yes" >> $GITHUB_ENV
          else
            git tag --force "latest@dev"
            git push --force -u origin "latest@dev"
            echo "SHOULD_RELEASE=no" >> $GITHUB_ENV
          fi

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: env.SHOULD_RELEASE == 'yes'
        with:
          files: dist/*
          tag_name: ${{ env.RELEASE_VERSION }}
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish latest development
        uses: softprops/action-gh-release@v1
        if: env.SHOULD_RELEASE == 'no'
        with:
          files: dist/*
          tag_name: latest@dev
          fail_on_unmatched_files: true
          generate_release_notes: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
